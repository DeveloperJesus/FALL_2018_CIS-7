#include <iostream>
#include <string>

void checkIfWFF(std::string, std::string, std::string, std::string);

int main()
{
	std::string input;
	const std::string parenthesis = "()";
	const std::string connectors = "~`^Vv=->";
	const std::string statements = "ABCDEFGHIJKLMNOPQRSTUWXYZabcdefghijklmnopqrstuwxyz";

	while (input != "0")
	{
		std::cout << "Enter a string, type in '0' to exit: ";
		getline(std::cin, input);

		checkIfWFF(input, parenthesis, connectors, statements);
	}
	return 0;
}

void checkIfWFF(std::string input, std::string parenthesis, std::string connectors, std::string statements)
{
	int uPC = 0; // uPC = unbalancedParenthesisCounter
	int sCount = 0; //statementCounter
	bool isAWFF = true;

	if (input == "0")
		return;
	else if (input.length() < 5)
		isAWFF = false;
	else
	{
		for (int i = 0; i < input.length(); i++)
		{
			char c = input[i];

			if (c == ' ')
				continue;
			else if (parenthesis.find(c) != std::string::npos)
			{
				if (c == '(')
				{
					if (i - 1 >= 0)
					{
						if (input[i - 1] != '(' && input[i - 1] != ' ' && input[i - 1] != '~' && input[i - 1] != '`')
						{
							isAWFF = false;
							break;
						}
					}

					if (i + 1 <= input.length() - 1)
					{
						if (input[i + 1] == '(' || statements.find(input[i + 1]) != std::string::npos || input[i + 1] == '~' || input[i + 1] == '`')
							uPC++;
						else
						{
							isAWFF = false;
							break;
						}
					}
				}
				else if (')')
				{
					if (i - 1 >= 0)
					{
						if (input[i - 1] == ')' || statements.find(input[i - 1]) != std::string::npos)
							uPC--;
						else
						{
							isAWFF = false;
							break;
						}
					}

					if (i + 1 <= input.length() - 1)
					{
						if (input[i + 1] != ')' && input[i + 1] != ' ')
						{
							isAWFF = false;
							break;
						}
					}
				}
			}
			else if (connectors.find(c) != std::string::npos)
			{
				if (c == '~' || c == '`')
				{
					if (i - 1 >= 0)
					{
						if (input[i - 1] != ' ' && input[i - 1] != '(' && input[i - 1] != ')')
						{
							isAWFF = false;
							break;
						}
					}

					if (i + 1 <= input.length())
					{
						if (statements.find(input[i + 1]) == std::string::npos && input[i + 1] != '(')
						{
							isAWFF = false;
							break;
						}
					}
					else
					{
						isAWFF = false;
						break;
					}
				}
				else if (c == '^' || c == 'V' || c == 'v')
				{
					if (i + 1 <= input.length() - 1 && i - 1 >= 0)
					{
						if (input[i + 1] != ' ' && input[i - 1] != ' ')
						{
							isAWFF = false;
							break;
						}
					}
					else
					{
						isAWFF = false;
						break;
					}
				}
				else if (c == '=' || c == '-')
				{
					if (i - 1 >= 0 && i + 1 <= input.length() - 1)
					{
						if (input[i - 1] != ' ' && input[i + 1] != '>')
						{
							isAWFF = false;
							break;
						}
					}
					else
					{
						isAWFF = false;
						break;
					}
				}
				else if (c == '>')
				{
					if (i - 1 >= 0 && i + 1 <= input.length() - 1)
					{
						if ((input[i - 1] != '=' || input[i - 1] != '-') && input[i + 1] != ' ')
						{
							isAWFF = false;
							break;
						}
					}
					else
					{
						isAWFF = false;
						break;
					}
				}
			}
			else if (statements.find(c) != std::string::npos)
			{
				sCount++;
				if (i - 1 >= 0)
				{
					if (input[i - 1] != '~' && input[i - 1] != '`' && input[i - 1] != ' ' && input[i - 1] != '(')
					{
						isAWFF = false;
						break;
					}
				}

				if (i + 1 <= input.length() - 1)
				{
					if (input[i + 1] != ' ' && input[i + 1] != ')')
					{
						isAWFF = false;
						break;
					}
				}
			}
			else
			{
				isAWFF = false;
				break;
			}
		}
	}
	if (uPC != 0)
		isAWFF = false;
	if (sCount >= 2 && isAWFF)
		std::cout << "This input IS a WFF.\n\n";
	else
		std::cout << "This input IS NOT a WFF.\n\n";
}
